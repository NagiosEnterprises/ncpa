
#!/bin/bash

# NCPA Post-installation script for Solaris

echo "NCPA: Running post-installation setup..."

# Set proper ownership and permissions
chown -R nagios:nagios /usr/local/ncpa/var
chown nagios:nagios /usr/local/ncpa/etc /usr/local/ncpa/etc/*.cfg*
chmod -R 755 /usr/local/ncpa/var
chmod 755 /usr/local/ncpa/etc
chmod 644 /usr/local/ncpa/etc/*.cfg*

# Create run directory
mkdir -p /usr/local/ncpa/var/run
chown nagios:nagios /usr/local/ncpa/var/run
chmod 755 /usr/local/ncpa/var/run

# Create SMF service manifest
cat > /var/svc/manifest/application/ncpa.xml << 'EOF'
<?xml version="1.0"?>
<!DOCTYPE service_bundle SYSTEM "/usr/share/lib/xml/dtd/service_bundle.dtd.1">
<service_bundle type='manifest' name='ncpa'>
  <service name='application/ncpa' type='service' version='1'>
    <create_default_instance enabled='false' />
    <single_instance />
    <dependency name='multi-user' grouping='require_all' restart_on='none' type='service'>
      <service_fmri value='svc:/milestone/multi-user:default' />
    </dependency>
    <dependency name='filesystem' grouping='require_all' restart_on='none' type='service'>
      <service_fmri value='svc:/system/filesystem/local' />
    </dependency>
    <exec_method type='method' name='start' exec='/usr/local/ncpa/ncpa --start' timeout_seconds='60'>
      <method_context working_directory='/usr/local/ncpa'>
        <method_credential user='nagios' group='nagios' />
        <method_environment>
          <envvar name='LD_LIBRARY_PATH' value='/usr/local/ncpa/lib:/usr/local/lib:/lib:/usr/lib' />
          <envvar name='PATH' value='/usr/local/bin:/usr/bin:/bin' />
        </method_environment>
      </method_context>
    </exec_method>
    <exec_method type='method' name='stop' exec=':kill' timeout_seconds='60' />
    <property_group name='startd' type='framework'>
      <propval name='duration' type='astring' value='contract' />
      <propval name='ignore_error' type='astring' value='core,signal' />
    </property_group>
    <property_group name='application' type='application'>
      <stability value='Evolving' />
    </property_group>
    <template>
      <common_name>
        <loctext xml:lang='C'>Nagios Cross-Platform Agent</loctext>
      </common_name>
      <documentation>
        <manpage title='ncpa' section='1' />
      </documentation>
    </template>
  </service>
</service_bundle>
EOF

# Validate the SMF manifest first
echo "NCPA: Validating SMF manifest..."
if svccfg validate /var/svc/manifest/application/ncpa.xml; then
    echo "NCPA: SMF manifest validation passed"
else
    echo "NCPA: ERROR - SMF manifest validation failed"
    echo "NCPA: Manifest content:"
    tail -20 /var/svc/manifest/application/ncpa.xml
    exit 1
fi

# COMPLETE SMF SERVICE CLEANUP AND RECREATION
echo "NCPA: Performing complete SMF service cleanup..."

# Force remove all traces of ncpa services
echo "NCPA: Removing all traces of NCPA services..."
svccfg delete -f application/ncpa 2>/dev/null || true
svccfg delete -f site/ncpa 2>/dev/null || true

# Clear any repository corruption by restarting manifest-import first
echo "NCPA: Clearing SMF repository state..."
svcadm restart svc:/system/manifest-import 2>/dev/null || true
sleep 3

# Remove the manifest from the standard location to prevent auto-import conflicts
echo "NCPA: Temporarily moving manifest to prevent conflicts..."
if [ -f /var/svc/manifest/application/ncpa.xml ]; then
    mv /var/svc/manifest/application/ncpa.xml /tmp/ncpa.xml.backup
fi

# Wait for SMF to process the restart
sleep 5

# Use direct svccfg commands to create service instead of XML import
echo "NCPA: Creating service directly using svccfg commands..."
if svccfg << 'SVCCFG_EOF'
add application/ncpa service
select application/ncpa
add default instance
select default
addpg startd framework
setprop startd/duration = astring: contract
setprop startd/ignore_error = astring: "core,signal"
addpg general framework
setprop general/enabled = boolean: false
addpg start method
setprop start/exec = astring: "/usr/local/ncpa/ncpa --start"
setprop start/timeout_seconds = count: 60
setprop start/type = astring: method
addpg stop method
setprop stop/exec = astring: ":kill"
setprop stop/timeout_seconds = count: 60
setprop stop/type = astring: method
addpg dependency_multi-user dependency
setprop dependency_multi-user/entities = fmri: svc:/milestone/multi-user:default
setprop dependency_multi-user/grouping = astring: require_all
setprop dependency_multi-user/restart_on = astring: none
setprop dependency_multi-user/type = astring: service
addpg dependency_filesystem dependency
setprop dependency_filesystem/entities = fmri: svc:/system/filesystem/local
setprop dependency_filesystem/grouping = astring: require_all
setprop dependency_filesystem/restart_on = astring: none
setprop dependency_filesystem/type = astring: service
addpg method_context application
setprop method_context/working_directory = astring: "/usr/local/ncpa"
setprop method_context/user = astring: nagios
setprop method_context/group = astring: nagios
addpg method_environment application
setprop method_environment/LD_LIBRARY_PATH = astring: "/usr/local/ncpa/lib:/usr/local/lib:/lib:/usr/lib"
setprop method_environment/PATH = astring: "/usr/local/bin:/usr/bin:/bin"
refresh
exit
SVCCFG_EOF
then
    echo "NCPA: Service created successfully using direct svccfg commands"
else
    echo "NCPA: Direct svccfg creation failed, falling back to manual approach..."
    
    # Final fallback: use extremely simple service creation
    echo "NCPA: Using minimal service creation approach..."
    svccfg add application/ncpa service 2>/dev/null || true
    svccfg -s application/ncpa add default instance 2>/dev/null || true
    svccfg -s application/ncpa:default addpg start method 2>/dev/null || true
    svccfg -s application/ncpa:default setprop start/exec = astring: "/usr/local/ncpa/ncpa --start" 2>/dev/null || true
    svccfg -s application/ncpa:default setprop start/timeout_seconds = count: 60 2>/dev/null || true
    svccfg -s application/ncpa:default addpg stop method 2>/dev/null || true
    svccfg -s application/ncpa:default setprop stop/exec = astring: ":kill" 2>/dev/null || true
    svccfg -s application/ncpa:default setprop stop/timeout_seconds = count: 60 2>/dev/null || true
    svccfg -s application/ncpa:default addpg general framework 2>/dev/null || true
    svccfg -s application/ncpa:default setprop general/enabled = boolean: false 2>/dev/null || true
fi

# Force refresh all services to ensure our service is recognized
echo "NCPA: Forcing SMF repository refresh..."
svcadm refresh svc:/ 2>/dev/null || true
sleep 3

# Restore the manifest to its proper location for future reference
echo "NCPA: Restoring manifest to proper location..."
if [ -f /tmp/ncpa.xml.backup ]; then
    mv /tmp/ncpa.xml.backup /var/svc/manifest/application/ncpa.xml
    chmod 644 /var/svc/manifest/application/ncpa.xml
fi

# Wait for SMF to process all changes
sleep 5

# Comprehensive service verification
echo "NCPA: Comprehensive service verification..."
echo "NCPA: Method 1 - svcs application/ncpa:"
if svcs application/ncpa 2>/dev/null; then
    echo "NCPA: ✓ Service visible via standard svcs command"
    service_found=true
else
    echo "NCPA: ✗ Service not found with standard svcs command"
    service_found=false
fi

echo "NCPA: Method 2 - svcs application/ncpa:default:"
if svcs application/ncpa:default 2>/dev/null; then
    echo "NCPA: ✓ Service instance visible via svcs"
    instance_found=true
else
    echo "NCPA: ✗ Service instance not found"
    instance_found=false
fi

echo "NCPA: Method 3 - svccfg select test:"
if svccfg -s application/ncpa:default listprop >/dev/null 2>&1; then
    echo "NCPA: ✓ Service accessible via svccfg"
    svccfg_accessible=true
else
    echo "NCPA: ✗ Service not accessible via svccfg"
    svccfg_accessible=false
fi

# Try to enable the service if any method found it
if [ "$service_found" = "true" ] || [ "$instance_found" = "true" ] || [ "$svccfg_accessible" = "true" ]; then
    echo "NCPA: Service detected, attempting to enable..."
    
    # Try multiple enable approaches
    enable_success=false
    
    if [ "$service_found" = "true" ]; then
        echo "NCPA: Attempting enable via service name..."
        if svcadm enable application/ncpa 2>/dev/null; then
            echo "NCPA: ✓ Service enabled via service name"
            enable_success=true
        fi
    fi
    
    if [ "$enable_success" = "false" ] && [ "$instance_found" = "true" ]; then
        echo "NCPA: Attempting enable via instance name..."
        if svcadm enable application/ncpa:default 2>/dev/null; then
            echo "NCPA: ✓ Service enabled via instance name"
            enable_success=true
        fi
    fi
    
    if [ "$enable_success" = "false" ] && [ "$svccfg_accessible" = "true" ]; then
        echo "NCPA: Attempting enable via svccfg property change..."
        if svccfg -s application/ncpa:default setprop general/enabled = boolean: true 2>/dev/null && \
           svccfg -s application/ncpa:default refresh 2>/dev/null; then
            echo "NCPA: ✓ Service enabled via property change"
            enable_success=true
        fi
    fi
    
    if [ "$enable_success" = "true" ]; then
        # Wait for service to start and check status
        echo "NCPA: Waiting for service to start..."
        sleep 10
        
        # Check final status
        for method in "application/ncpa" "application/ncpa:default"; do
            if service_status=$(svcs -H -o state "$method" 2>/dev/null); then
                echo "NCPA: Service status ($method): $service_status"
                if [ "$service_status" = "online" ]; then
                    echo "NCPA: ✓ Service is running successfully!"
                    echo "NCPA: Service details:"
                    svcs -l "$method" 2>/dev/null || true
                    break
                elif [ "$service_status" = "disabled" ]; then
                    echo "NCPA: ⚠ Service is disabled, attempting to re-enable..."
                    svcadm enable "$method" 2>/dev/null || true
                elif [ "$service_status" = "maintenance" ]; then
                    echo "NCPA: ⚠ Service is in maintenance mode"
                    echo "NCPA: Service details:"
                    svcs -xv "$method" 2>/dev/null || true
                    echo "NCPA: Check service logs:"
                    echo "NCPA:   sudo tail -f /var/svc/log/application-ncpa:default.log"
                fi
            fi
        done
    else
        echo "NCPA: ✗ All enable attempts failed"
    fi
else
    echo "NCPA: ✗ Service not detected by any method"
    echo "NCPA: Checking what services exist in application category:"
    svcs -a | grep application | head -5 2>/dev/null || echo "NCPA: No application services found"
fi

echo "NCPA: Post-installation completed."
echo "NCPA: To manually start the service later, run: sudo svcadm enable application/ncpa"
